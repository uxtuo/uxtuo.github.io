<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Build your own blog with hexo]]></title>
      <url>/2017/11/10/what-is-hexo/</url>
      <content type="html"><![CDATA[<h2 id="What-is-Hexo"><a href="#What-is-Hexo" class="headerlink" title="What is Hexo?"></a><font color="#5CACEE">What is Hexo?</font></h2><blockquote>
<p>Hexo is a fast, simple and powerful blog framework. You write posts in Markdown (or other languages) and Hexo generates static files with a beautiful theme in seconds.<br>Installing Hexo is quite easy. However, you do need to have Nodejs &amp; Git installed first.<br>In order to install Nodejs you can see Install &amp; run your first application Nodejs.<br>In order to install Git you can see <a href="https://git-scm.com/" target="_blank" rel="external">https://git-scm.com/</a> .</p>
</blockquote>
<a id="more"></a>
<h2 id="Install-Hexo"><a href="#Install-Hexo" class="headerlink" title="Install Hexo"></a><font color="#5CACEE">Install Hexo</font></h2><p>  Once all the requirements are installed,you can install Hexo.<br> <br> $ npm install -g hexo-cli</p>
<blockquote>
<p><img src="https://t1.picb.cc/uploads/2017/11/10/vOiqe.png" alt="vOiqe.png"></p>
</blockquote>
<h2 id="Create-a-blog"><a href="#Create-a-blog" class="headerlink" title="Create a blog"></a><font color="#5CACEE">Create a blog</font></h2><p>  Now that hexo is installed run the following commands to initialise Hexo project<br> <br>$ hexo init myblog <br> $ cd myblog  <br>$ npm install</p>
<blockquote>
<p><img src="https://t1.picb.cc/uploads/2017/11/10/vOIiN.png" alt="vOIiN.png"></p>
</blockquote>
<p>You can modify site settings in <font color="brow" size="2">_config.yml</font>. for the sake of simplicity we�re only modify the Title and author name .</p>
<h2 id="Run-the-Blog"><a href="#Run-the-Blog" class="headerlink" title="Run the Blog"></a><font color="#5CACEE">Run the Blog</font></h2><p>  Run the server:<br><br>    $ hexo server </p>
<blockquote>
<p><img src="https://t1.picb.cc/uploads/2017/11/10/vOfzK.png" alt="vOfzK.png"><br>  launch your browser and navigate to <a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a>.<br><img src="https://t1.picb.cc/uploads/2017/11/10/vOZcj.png" alt="vOZcj.png"><br>Voila your first blog is working!</p>
</blockquote>
<h2 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a><font color="#5CACEE">Create a new post</font></h2><p>  Create a new post is very simlpe all what you have to do is :<br>  <br>   $ hexo new “My Fist Post with hexo”</p>
<blockquote>
<p><img src="https://t1.picb.cc/uploads/2017/11/10/vOVrX.png" alt="vOVrX.png"><br>Update the file using Markdown language:</p>
</blockquote>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: My Fist Post with hexo</span><br><span class="line">date: 2016-09-25 20:03:25</span><br><span class="line">tags:</span><br><span class="line">---</span><br><span class="line">This my first post using [<span class="string">Hexo</span>](<span class="link">https://hexo.io/</span>)! </span><br><span class="line"></span><br><span class="line"><span class="section">## First title</span></span><br><span class="line"></span><br><span class="line"><span class="section">### a first subtitile </span></span><br><span class="line"></span><br><span class="line"><span class="code">    /usr/bin/bash</span></span><br><span class="line"><span class="code">    $ hexo new "My New Post"</span></span><br><span class="line"><span class="code">    </span></span><br><span class="line"></span><br><span class="line"><span class="section">## Second title</span></span><br><span class="line"></span><br><span class="line">More info: [<span class="string">Writing</span>](<span class="link">https://hexo.io/docs/writing.html</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p><img src="https://t1.picb.cc/uploads/2017/11/10/vOgSG.png" alt="vOgSG.png"><br>  Run the server again:<br> <br>   $ hexo server<br><img src="https://t1.picb.cc/uploads/2017/11/10/vOnxs.png" alt="vOnxs.png"></p>
</blockquote>
<h2 id="Deployment-on-Github"><a href="#Deployment-on-Github" class="headerlink" title="Deployment on Github"></a><font color="#5CACEE">Deployment on Github</font></h2><p>  Now what about Deployment, it�s exactly what we are going to do, first Create new Github repository :</p>
<blockquote>
<p><img src="https://t1.picb.cc/uploads/2017/11/10/vOwQc.png" alt="vOwQc.png"><br>  Click settings<br><img src="https://t1.picb.cc/uploads/2017/11/10/vOlt7.png" alt="vOlt7.png"><br><img src="https://t1.picb.cc/uploads/2017/11/10/vOCST.png" alt="vOCST.png"><br>  Then install hexo-deployer-git:<br> <br>  $ npm install hexo-deployer-git –save<br><img src="https://t1.picb.cc/uploads/2017/11/10/vOyx8.png" alt="vOyx8.png"></p>
</blockquote>
<p>  Click clone or download button:</p>
<blockquote>
<p><img src="https://t1.picb.cc/uploads/2017/11/10/vOu56.png" alt="vOu56.png"></p>
</blockquote>
<p>  Update _config.yaml file :</p>
<blockquote>
<p><img src="https://t1.picb.cc/uploads/2017/11/10/vOtyy.png" alt="vOtyy.png"></p>
</blockquote>
<p>  It�s time for deployement :<br>  <br> $ hexo deploy</p>
<blockquote>
<p><img src="https://t1.picb.cc/uploads/2017/11/10/vOJtg.png" alt="vOJtg.png"></p>
</blockquote>
<p>  To preview launch your browser.</p>
<blockquote>
<p><img src="https://t1.picb.cc/uploads/2017/11/10/vOmyM.png" alt="vOmyM.png"></p>
</blockquote>
<p>You can get see the blog on <a href="https://malektrainer.github.io/" target="_blank" rel="external">https://malektrainer.github.io/</a>.<br><br>You can find source code on <a href="https://github.com/malektrainer/myblog" target="_blank" rel="external">https://github.com/malektrainer/myblog</a>.</p>
]]></content>
      
        <categories>
            
            <category> blog </category>
            
        </categories>
        
        
        <tags>
            
            <tag> blog </tag>
            
            <tag> server </tag>
            
            <tag> environment </tag>
            
            <tag> mark </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[构建基于Busybox的Nginx服务容器]]></title>
      <url>/2016/04/22/%E6%9E%84%E5%BB%BA%E5%9F%BA%E4%BA%8EBusybox%E7%9A%84Nginx%E6%9C%8D%E5%8A%A1%E5%AE%B9%E5%99%A8/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a><font color="#5CACEE">简介</font></h2><blockquote>
<p>用docker容器进行打包服务非常方便 不需要考虑依赖的问题 只要把容器复制到其他有docker daemon的服务器就可以直接启动 并能很方便的利用Cgroup, Namespace技术实现资源控制和资源隔离<br>这篇文档以Nginx为例 其他的像redis mysql php等服务也是可以使用这个方法进行打包为最精简的 只包含必须依赖的服务容器</p>
</blockquote>
<a id="more"></a>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a><font color="#5CACEE">环境</font></h2><blockquote>
<p>系统是ubuntu server 15.10版 用ubuntu系统作为docker服务的载体 如果非ubuntu15.10发行版 尽量保证内核版本在3.18以上 Nginx是在CentOS 6.7的容器中编译的 之后在ubuntu上完成打包<br>在容器中编译Nginx只是我的个人习惯 不喜欢将主机环境乱安装一些不必要的包 保持清洁就好 编译什么的就交给容器去做吧</p>
</blockquote>
<h3 id="主机环境"><a href="#主机环境" class="headerlink" title="主机环境"></a><font color="#CDAA7D">主机环境</font></h3><table>
<thead>
<tr>
<th>身份</th>
<th style="text-align:center">系统</th>
<th style="text-align:right">IP</th>
</tr>
</thead>
<tbody>
<tr>
<td>Docker服务</td>
<td style="text-align:center">ubuntu 15.10</td>
<td style="text-align:right">172.17.0.1</td>
</tr>
<tr>
<td>Docker容器</td>
<td style="text-align:center">CentOS 6.7</td>
<td style="text-align:right">172.17.0.3</td>
</tr>
</tbody>
</table>
<h3 id="软件环境"><a href="#软件环境" class="headerlink" title="软件环境"></a><font color="#CDAA7D">软件环境</font></h3><table>
<thead>
<tr>
<th>软件名称</th>
<th style="text-align:center">版本号</th>
<th style="text-align:right">下载地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>Nginx</td>
<td style="text-align:center">1.9.15</td>
<td style="text-align:right"><a href="http://nginx.org/download/nginx-1.9.15.tar.gz" target="_blank" rel="external"><font color="#AAAAAA">点击下载</font></a></td>
</tr>
<tr>
<td>Docker</td>
<td style="text-align:center">1.9.1</td>
<td style="text-align:right"><a href="http://mirrors.aliyun.com/docker-engine/apt/pool/main/d/docker-engine/docker-engine_1.9.1-0~wily_amd64.deb" target="_blank" rel="external"><font color="#AAAAAA">点击下载</font></a></td>
</tr>
<tr>
<td>kernel</td>
<td style="text-align:center">4.2.0</td>
<td style="text-align:right"><font color="#AAAAAA">系统自带</font></td>
</tr>
</tbody>
</table>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a><font color="#5CACEE">步骤</font></h2><p>以下是打包Nginx服务容器的基本思路</p>
<ul>
<li>选用Busybox环境作为基础</li>
<li>在CentOS 容器中编译Nginx</li>
<li>将Nginx的运行依赖库和Nginx程序复制到主机环境</li>
<li>部署到Busybox构建的rootfs中</li>
<li>导入Docker 查看是否正常运行</li>
</ul>
<h3 id="构建Busybox最小容器"><a href="#构建Busybox最小容器" class="headerlink" title="构建Busybox最小容器"></a><font color="#CDAA7D">构建Busybox最小容器</font></h3><blockquote>
<p>Busybox构建文档：<a href="/2016/04/21/docker/Busybox构建最小容器"><font color="#AAAAAA">点击打开文档内容</font></a><br>构建完毕之后 busybox-1.24.2/_install 就是我们需要当作容器基础的rootfs了 将它复制到随便一个目录 留用</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -rf busybox-1.24.2/_install/ rootfs</span><br></pre></td></tr></table></figure>
<h3 id="编译安装Nginx"><a href="#编译安装Nginx" class="headerlink" title="编译安装Nginx"></a><font color="#CDAA7D">编译安装Nginx</font></h3><blockquote>
<p>Nginx的编译文档：<a href="/2016/03/31/nginx/nginx编译安装"><font color="#AAAAAA">点击打开文档内容</font></a><br>只需要做到文档中make -j4 也就是编译完成就可以了 之后的安装步骤就不按照文档的走了</p>
</blockquote>
<h4 id="安装nginx到非默认根"><a href="#安装nginx到非默认根" class="headerlink" title="安装nginx到非默认根"></a><font color="#DDA0DD">安装nginx到非默认根</font></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make DESTDIR=/nginx install</span><br></pre></td></tr></table></figure>
<p>通过DESTDIR更改安装Nginx的根位置 以/nginx目录作为nginx安装的根</p>
<pre><code>[root@localhost nginx-1.9.15]# ls /nginx/
usr  var
[root@localhost nginx-1.9.15]# tree /nginx/
/nginx/
├── usr
│   └── local
│       └── nginx
│           ├── conf
│           │   ├── fastcgi.conf
│           │   ├── fastcgi.conf.default
│           │   ├── fastcgi_params
│           │   ├── fastcgi_params.default
│           │   ├── koi-utf
│           │   ├── koi-win
│           │   ├── mime.types
</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /nginx/</span><br><span class="line">mkdir lib lib64                     <span class="comment"># 创建两个依赖库文件夹</span></span><br><span class="line">strip usr/<span class="built_in">local</span>/nginx/sbin/nginx    <span class="comment"># 裁剪nginx二进制的编译跟踪信息 缩减nginx体积</span></span><br></pre></td></tr></table></figure>
<h4 id="复制Nginx运行依赖库"><a href="#复制Nginx运行依赖库" class="headerlink" title="复制Nginx运行依赖库"></a><font color="#DDA0DD">复制Nginx运行依赖库</font></h4><blockquote>
<p>接下来查看nginx程序的所有依赖</p>
</blockquote>
<pre><code>[root@localhost nginx]# ldd usr/local/nginx/sbin/nginx 
    linux-vdso.so.1 =&gt;  (0x00007fff3caa3000)
    libdl.so.2 =&gt; /lib64/libdl.so.2 (0x00007f9bc2ff8000)
    libpthread.so.0 =&gt; /lib64/libpthread.so.0 (0x00007f9bc2ddb000)
    libcrypt.so.1 =&gt; /lib64/libcrypt.so.1 (0x00007f9bc2ba3000)
    libz.so.1 =&gt; /lib64/libz.so.1 (0x00007f9bc298d000)
    libc.so.6 =&gt; /lib64/libc.so.6 (0x00007f9bc25f9000)
    /lib64/ld-linux-x86-64.so.2 (0x0000561c3968f000)
    libfreebl3.so =&gt; /lib64/libfreebl3.so (0x00007f9bc23f5000)
</code></pre><p>将依赖复制到刚才创建的lib或者lib64目录中 如果这个依赖库在系统的lib目录下 那么就复制到lib目录中<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cp /lib64/libdl.so.2 lib64/</span><br><span class="line">cp /lib64/libpthread.so.0 lib64/</span><br><span class="line">cp /lib64/libcrypt.so.1 lib64/</span><br><span class="line">cp /lib64/libz.so.1 lib64/</span><br><span class="line">cp /lib64/libc.so.6 lib64/</span><br><span class="line">cp /lib64/ld-linux-x86-64.so.2 lib64/</span><br><span class="line">cp /lib64/libfreebl3.so lib64/</span><br></pre></td></tr></table></figure></p>
<p> 由于Nginx运行需要使用普通用户 所以需要读取passwd文件 读取解析passwd文件需要用到libnss_files.so.2这个库 所以也需要复制这个库到lib64中</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /lib64/libnss_files.so.2 lib64/</span><br></pre></td></tr></table></figure>
<p>如果在ubuntu上编译的话libnss_files.so.2位置在/lib/x86_64-linux-gnu/libnss_files.so.2<br>复制完成后lib64目录的内容应该如下所示：</p>
<pre><code>[root@localhost nginx]# ls lib64/
ld-linux-x86-64.so.2  libc.so.6   libfreebl3.so      libpthread.so.0
libcrypt.so.1         libdl.so.2  libnss_files.so.2  libz.so.1
</code></pre><h3 id="打包Nginx服务容器"><a href="#打包Nginx服务容器" class="headerlink" title="打包Nginx服务容器"></a><font color="#CDAA7D">打包Nginx服务容器</font></h3><blockquote>
<p>Nginx以及Nginx的运行依赖都已经放到/nginx目录中了 将这个目录移动到和刚才的rootfs同一目录下 然后再创建两个目录 留用</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir build target</span><br></pre></td></tr></table></figure>
<h4 id="认识overlayFS"><a href="#认识overlayFS" class="headerlink" title="认识overlayFS"></a><font color="#DDA0DD">认识overlayFS</font></h4><blockquote>
<p>overlay是一种联合挂载的文件系统 可以将几个不同的目录挂载到一个目录中 然后将所有的文件展示出来 而且在挂载的目录中对文件的操作并不会影响到其他目录中实际的文件<br>同时 在新版本的docker中 overlay便是docker容器默认使用的存储驱动 但是overlay在内核大于3.18的版本中才被支持 所以尽量用使用较新内核版本的发行版来玩Docker<br>因为overlay的这些特性 用来辅助制作Nginx服务容器岂不是很方便 因为在挂载的目录中的操作并不会影响基层目录的文件 这样就算误删了文件 也是可以恢复的</p>
</blockquote>
<p>现在看起来 应该是这个效果</p>
<pre><code>root@ubuntu:~# ls -lh
total 16K
drwxr-xr-x  9 root root 4.0K Apr 22 12:50 build     # overlay的工作目录
drwxr-xr-x  6 root root 4.0K Apr 22 15:34 nginx     # 刚才安装的Nginx目录
drwxr-xr-x 18 root root 4.0K Apr 22 11:52 rootfs    # busybox的目录
drwxr-xr-x  1 root root 4.0K Apr 22 12:50 target    # 这个就是联合挂载到的目标目录
</code></pre><p>检查overlay驱动是否已经加载 否则加载overlay驱动<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lsmod |grep overlay</span><br><span class="line">modprobe overlay</span><br></pre></td></tr></table></figure></p>
<p>如下所示 那么就可以使用overlay文件系统了 </p>
<pre><code>root@ubuntu:~# lsmod |grep overlay
overlay                49152  1
root@ubuntu:~# cat /proc/filesystems |grep overlay
nodev    overlayfs
nodev    overlay
</code></pre><p>用rootfs和nginx做基层 其中rootfs是第一层 如果还有其他目录 依次用冒号隔开 build做为overlay工作目录  /tmp是overlay必须的一个空目录 将lowerdir中的目录都挂载到target目录上<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount -t overlay overlay -o lowerdir=rootfs:nginx,upperdir=build,workdir=/tmp target/</span><br></pre></td></tr></table></figure></p>
<p>接下来可以看到target目录中 rootfs和nginx目录中的内容同时出现在target目录中</p>
<pre><code>root@ubuntu:~# ls target/
bin  etc   lib    linuxrc  mnt   root  sbin  tmp  var
dev  home  lib64  media    proc  run   sys   usr
root@ubuntu:~# ls target/bin/busybox 
target/bin/busybox
root@ubuntu:~# ls target/usr/local/nginx/sbin/nginx 
target/usr/local/nginx/sbin/nginx
</code></pre><p>如果系统刚好不支持overlay文件系统的话 思想原理是相同的 直接将rootfs和nginx目录中的文件都复制到target中吧</p>
<h4 id="Chroot进行根切换"><a href="#Chroot进行根切换" class="headerlink" title="Chroot进行根切换"></a><font color="#DDA0DD">Chroot进行根切换</font></h4><blockquote>
<p>接下来就是配置Nginx的运行环境了 这样才能保证Nginx打包为容器后能正常的运行<br>通过chroot工具切换当前根到target目录中 这也算文件系统隔离一种的方式</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chroot target sh</span><br></pre></td></tr></table></figure>
<p>可以看到 进入到了一个不同的shell中 ls / 竟然发现了linuxrc文件 现在已经将根切换到target目录中了</p>
<pre><code>/ # ls /
bin      etc      lib      linuxrc  mnt      root     sbin     tmp      var
dev      home     lib64    media    proc     run      sys      usr
</code></pre><h4 id="根据执行Nginx的报错进行配置"><a href="#根据执行Nginx的报错进行配置" class="headerlink" title="根据执行Nginx的报错进行配置"></a><font color="#DDA0DD">根据执行Nginx的报错进行配置</font></h4><p>接下来的操作在这个根中进行 配置Nginx的运行环境 这些操作都是通过不断的执行nginx程序 查看nginx的报错总结的</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">adduser nginx                       <span class="comment"># 添加nginx用户 </span></span><br><span class="line">mkdir -p /var/tmp/nginx/client/     <span class="comment"># 创建nginx运行需要的目录</span></span><br><span class="line">mkdir -p /var/www/html              <span class="comment"># 以后将使用这个路径作为Nginx网页根目录</span></span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/nginx/sbin/nginx /usr/sbin/            <span class="comment"># 添加nginx软链接到环境变量中</span></span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/nginx/conf/nginx.conf /etc/nginx.conf  <span class="comment"># 添加配置文件软连接到/etc目录</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'&lt;h1&gt;hello nginx&lt;/h1&gt;'</span> &gt; /var/www/html/index.html  <span class="comment"># 创建一个索引文件</span></span><br></pre></td></tr></table></figure>
<p>再次运行nginx程序 这时候遇到了ginx: [emerg] open(“/dev/null”) failed的错误 原因是打不开这个设备文件 这个只能通过启动为一个Docker容器来解决了</p>
<pre><code>/ # /usr/local/nginx/sbin/nginx 
nginx: [emerg] open(&quot;/dev/null&quot;) failed (2: No such file or directory)
</code></pre><h4 id="修改Nginx配置文件"><a href="#修改Nginx配置文件" class="headerlink" title="修改Nginx配置文件"></a><font color="#DDA0DD">修改Nginx配置文件</font></h4><p>剩下的就是修改nginx的配置文件了</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/nginx.conf</span><br></pre></td></tr></table></figure>
<pre><code>第一行添加 daemon off; 让nginx前台运行 这个必须添加
http{}中添加 autoindex on; 运行目录索引 可以根据实际情况添加
http{
  server{
    location / {
        root   /var/www/html;           # root改为/var/www/html 可以根据实际情况更改
        index  index.html index.htm;
    }
  }
}
</code></pre><h4 id="将目录打包为Docker容器"><a href="#将目录打包为Docker容器" class="headerlink" title="将目录打包为Docker容器"></a><font color="#DDA0DD">将目录打包为Docker容器</font></h4><p>输入exit或者键入 Ctrl+d 就可以退出chroot 回到正常的根中了 接下来 将数据打包为Docker容器 可以看到 大小仅仅8M<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> target/</span><br><span class="line">tar -cf /dev/stdout *|docker import - nginx:1.9.15</span><br></pre></td></tr></table></figure></p>
<pre><code>root@ubuntu:~/target# docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
nginx               1.9.15              99089cedcc48        3 seconds ago       8.071 MB
</code></pre><h4 id="启动容器-检查是否成功"><a href="#启动容器-检查是否成功" class="headerlink" title="启动容器 检查是否成功"></a><font color="#DDA0DD">启动容器 检查是否成功</font></h4><p>然后后台启动这个容器 并且查看容器IP 通过curl命令检查nginx是否正常运行 可以看到 成功返回 hello nginx<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name nginx nginx:1.9.15 nginx</span><br><span class="line">docker inspect --format <span class="string">'&#123;&#123;.NetworkSettings.IPAddress&#125;&#125;'</span> nginx</span><br></pre></td></tr></table></figure></p>
<pre><code>root@ubuntu:~/target# docker run -d --name nginx nginx:1.9.15 nginx
0db0d45152948339fb0c9a23e8dfba6798c650e24075d725ba2d3021eb3b801b
root@ubuntu:~/target# docker inspect --format &apos;{{.NetworkSettings.IPAddress}}&apos; nginx
172.17.0.8
root@ubuntu:~/target# curl 172.17.0.8
&lt;h1&gt;hello nginx&lt;/h1&gt;
root@ubuntu:~/target#
</code></pre><p>这样 一个非常小 但是可以提供完整功能的Nginx服务容器就打包完成了 </p>
<h4 id="overlayFS文件误删的恢复"><a href="#overlayFS文件误删的恢复" class="headerlink" title="overlayFS文件误删的恢复"></a><font color="#DDA0DD">overlayFS文件误删的恢复</font></h4><p>如果在制作这个容器的过程中 不幸误删了target目录中的文件 还记的build这个文件吗<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf linuxrc</span><br></pre></td></tr></table></figure></p>
<pre><code>root@ubuntu:~/target# ls -l ../build/linuxrc 
c--------- 1 root root 0, 0 Apr 22 17:28 ../build/linuxrc
</code></pre><p>可以看到 build目录中出现了一个主次设备号都为0的字符设备 只要删除了这个字符设备 文件就恢复了<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf ../build/linuxrc</span><br></pre></td></tr></table></figure></p>
<pre><code>root@ubuntu:~/target# ls
bin  etc   lib    linuxrc  mnt   root  sbin  tmp  var
dev  home  lib64  media    proc  run   sys   usr
</code></pre><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a><font color="#5CACEE">附录</font></h2><h3 id="将Nginx容器镜像保存为文件"><a href="#将Nginx容器镜像保存为文件" class="headerlink" title="将Nginx容器镜像保存为文件"></a><font color="#CDAA7D">将Nginx容器镜像保存为文件</font></h3><blockquote>
<p>如果想把这个容器共享给其他人使用 除了使用push到仓库中 还可以直接通过文件的方式共享</p>
</blockquote>
<h4 id="配置一个默认启动命令"><a href="#配置一个默认启动命令" class="headerlink" title="配置一个默认启动命令"></a><font color="#DDA0DD">配置一个默认启动命令</font></h4><blockquote>
<p>导入这个Nginx服务容器之后 每次启动都需要手动输入nginx命令 这样显的比较麻烦 可以通过Dockerfile的方式给这个容器配置一个默认的启动命令</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim Dockerfile</span><br></pre></td></tr></table></figure>
<pre><code>键入以下内容：
root@ubuntu:~# cat Dockerfile 
FROM nginx:1.9.15
CMD nginx

nginx就是启动的命令 如果命令还带有参数 可以直接写出 例如 CMD nginx -s reload
</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t nginx .         <span class="comment"># 给新镜像配置一个标签 记得不要忘记了最后的 .</span></span><br></pre></td></tr></table></figure>
<pre><code>root@ubuntu:~# docker build -t nginx .
Sending build context to Docker daemon 25.09 MB
Step 1 : FROM nginx:1.9.15
 ---&gt; 99089cedcc48
Step 2 : CMD nginx
 ---&gt; Running in 12b1a81d553c
 ---&gt; 114ba21e8f1c
Removing intermediate container 12b1a81d553c
Successfully built 114ba21e8f1c
root@ubuntu:~# docker run -d nginx:latest
0f3f39dd3aea5a16b10a470ffecca716b31d0deab5420b07ee86bd1180bc2256
</code></pre><p>可以看到 启动这个新容器已经不需要输入nginx命令了 其实还有一个方法可以更改默认启动命令 通过直接修改镜像的配置文件<br>可以看到 nginx:1.9.15镜像的ID是99089cedcc48 这只是完整ID的一部分 配置信息保存在/var/lib/docker/graph中</p>
<pre><code>root@ubuntu:~# docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
nginx               1.9.15              99089cedcc48        48 minutes ago      8.071 MB
</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /var/lib/docker/graph</span><br><span class="line"><span class="built_in">cd</span> 99089cedcc48*</span><br><span class="line">vim json</span><br></pre></td></tr></table></figure>
<p>这时就打开了这个镜像的配置文件 Cmd字段就是默认命令 还可以顺便改下comment信息</p>
<pre><code>&quot;comment&quot;:&quot;nginx 1.9.15&quot;,       # comment字段改为你想表达的信息
&quot;Cmd&quot;:[&quot;yunfwe&quot;],               # Cmd字段有两个 第一个是作者信息
&quot;Cmd&quot;:[&quot;nginx&quot;],                # 第二个才是启动命令

如果运行命令有其他参数的话 用逗号隔开 例如 &quot;Cmd&quot;:[&quot;nginx&quot;,&quot;-s&quot;,&quot;reload&quot;],
这样就相当于 nginx -s reload 了
</code></pre><p>接下来使用docker history nginx:1.9.11 查看信息</p>
<pre><code>可以看到 CREATED BY 还有 COMMENT 是自己写的信息了
root@ubuntu:~# docker history 99089cedcc48
IMAGE               CREATED             CREATED BY          SIZE                COMMENT
99089cedcc48        58 minutes ago      yunfwe              8.071 MB           nginx 1.9.15

顺便可以看到运行命令也已经是nginx了
root@ubuntu:~# docker inspect --format {{.Config.Cmd}} nginx:1.9.15
{[nginx]}
</code></pre><p>这两种修改默认启动命令方法的一个重要区别是 第二种在原本的镜像上修改 是不会产生新的层的 而用Dockerfile修改 相当于新建了一个层 这个层提供了默认启动命令 不信可以使用docker history验证一下</p>
<h4 id="保存为文件"><a href="#保存为文件" class="headerlink" title="保存为文件"></a><font color="#DDA0DD">保存为文件</font></h4><blockquote>
<p>默认docker导出的是个tar归档 这里直接将归档压缩为gz包 文件命名规则是<br>REPOSITORY_TAG-Type.tar.gz<br>其中的Type是标识这个文件是由镜像保存的还是已经生成的容器导出的</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker save nginx:1.9.15 |gzip &gt; nginx_1.9.15-image.tar.gz</span><br></pre></td></tr></table></figure>
<p>要恢复的话也很简单 docker支持直接从gz压缩包中恢复<br>导入新的镜像 这个镜像的标签可能会丢失 但是id号还在 给这个id好重新打个标签</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker load &lt; nginx_1.9.15-image.tar.gz</span><br><span class="line">docker tag 99089cedcc48 nginx:1.9.15</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> docker </category>
            
        </categories>
        
        
        <tags>
            
            <tag> docker </tag>
            
            <tag> nginx </tag>
            
            <tag> busybox </tag>
            
            <tag> overlay </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
